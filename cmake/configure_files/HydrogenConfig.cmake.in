# This will create the H::hydrogen IMPORTED target. It will also
# export many useful variables that one may want.

include("${CMAKE_CURRENT_LIST_DIR}/HydrogenConfigVersion.cmake")

list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_LIST_DIR}")
list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_LIST_DIR}/modules")
set(HYDROGEN_VERSION ${PACKAGE_VERSION})

set(HYDROGEN_C_COMPILER "@CMAKE_C_COMPILER@")
set(HYDROGEN_CXX_COMPILER "@CMAKE_CXX_COMPILER@")

set(HYDROGEN_C_FLAGS "@CMAKE_C_FLAGS@")
set(HYDROGEN_CXX_FLAGS "@CMAKE_CXX_FLAGS@")

set(HYDROGEN_MPI_C_COMPILER "@MPI_C_COMPILER@")
set(HYDROGEN_MPI_CXX_COMPILER "@MPI_CXX_COMPILER@")

if (NOT MPI_C_COMPILER)
  set(MPI_C_COMPILER "${HYDROGEN_MPI_C_COMPILER}")
endif ()
if (NOT MPI_CXX_COMPILER)
  set(MPI_CXX_COMPILER "${HYDROGEN_MPI_CXX_COMPILER}")
endif ()

set(_OpenMP_DIR "@OpenMP_DIR@")
if (NOT OpenMP_DIR)
  set(OpenMP_DIR "${_OpenMP_DIR}")
endif ()
include (modules/FindAndVerifyOpenMP)
# FIXME: I should do verification to make sure all found features are
#   the same.
include (modules/FindAndVerifyMPI)

# Aluminum
set(_HYDROGEN_HAVE_ALUMINUM @HYDROGEN_HAVE_ALUMINUM@)
set(_HYDROGEN_HAVE_NCCL2 @HYDROGEN_HAVE_NCCL2@)
set(_HYDROGEN_HAVE_AL_MPI_CUDA @HYDROGEN_HAVE_AL_MPI_CUDA@)
if (_HYDROGEN_HAVE_ALUMINUM)
  find_package(Aluminum REQUIRED)

  if (_HYDROGEN_HAVE_NCCL2 AND NOT AL_HAS_NCCL)
    message(FATAL_ERROR
      "Hydrogen expects NCCL2 support "
      "but Aluminum does not have NCCL2 support.")
  endif ()
  if (_HYDROGEN_HAVE_AL_MPI_CUDA AND NOT AL_HAS_MPI_CUDA)
    message(FATAL_ERROR
      "Hydrogen expects MPI-CUDA support "
      "but Aluminum does not have MPI-CUDA support.")
  endif ()
endif (_HYDROGEN_HAVE_ALUMINUM)

# CUDA!
set(_HYDROGEN_HAVE_CUDA @HYDROGEN_HAVE_CUDA@)
if (_HYDROGEN_HAVE_CUDA)
  find_package(NVML REQUIRED)

  if (NOT TARGET cuda::toolkit)
    add_library(cuda::toolkit INTERFACE IMPORTED)
  endif ()

  set_property(TARGET cuda::toolkit PROPERTY
    INTERFACE_LINK_LIBRARIES
    "${CUDA_CUBLAS_LIBRARIES}" "${CUDA_LIBRARIES}" "${CUB_LIBRARIES}"
    "${NVML_LIBRARIES}")

  set_property(TARGET cuda::toolkit PROPERTY
    INTERFACE_COMPILE_OPTIONS $<$<COMPILE_LANGUAGE:CUDA>:-arch=sm_30>)

  set_property(TARGET cuda::toolkit PROPERTY
    INTERFACE_INCLUDE_DIRECTORIES "${CUDA_INCLUDE_DIRS}")
endif ()

# Math libraries
set(_HYDROGEN_HAVE_QUADMATH "@HYDROGEN_HAVE_QUADMATH@")
set(_HYDROGEN_HAVE_QD "@HYDROGEN_HAVE_QD@")
set(_HYDROGEN_HAVE_MPC "@HYDROGEN_HAVE_MPC@")
set(_HYDROGEN_HAVE_MKL "@HYDROGEN_HAVE_MKL@")
set(_HYDROGEN_HAVE_MKL_GEMMT "@HYDROGEN_HAVE_MKL_GEMMT@")

# Quadmath
if (_HYDROGEN_HAVE_QUADMATH)
  set(${PROJECT_NAME}_ENABLE_QUADMATH TRUE)
  if (NOT QUADMATH_LIBRARY)
    set(QUADMATH_LIBRARY "@QUADMATH_LIBRARY@")
  endif ()
  if (NOT QUADMATH_INCLUDE_DIR)
    set(QUADMATH_INCLUDE_DIR "@QUADMATH_INCLUDE_DIR@")
  endif ()
endif ()

# QD
if (_HYDROGEN_HAVE_QD)
  set(${PROJECT_NAME}_ENABLE_QUADMATH TRUE)
  if (NOT QD_LIBRARY)
    set(QD_LIBRARY "@QD_LIBRARY@")
  endif ()
  if (NOT QD_INCLUDE_DIR)
    set(QD_INCLUDE_DIR "@QD_INCLUDE_DIR@")
  endif ()
endif ()

# MPC
if (_HYDROGEN_HAVE_MPC)
  set(${PROJECT_NAME}_ENABLE_MPC TRUE)
  if (NOT GMP_LIBRARY)
    set(GMP_LIBRARY "@GMP_LIBRARY@" CACHE FILEPATH "The GMP library" FORCE)
  endif ()
  if (NOT MPFR_LIBRARY)
    set(MPFR_LIBRARY "@MPFR_LIBRARY@" CACHE FILEPATH "The MPFR library" FORCE)
  endif ()
  if (NOT MPC_LIBRARY)
    set(MPC_LIBRARY "@MPC_LIBRARY@" CACHE FILEPATH "The MPC library" FORCE)
  endif ()
  if (NOT GMP_INCLUDE_DIR)
    set(GMP_INCLUDE_DIR "@GMP_INCLUDE_DIR@"
      CACHE FILEPATH "The GMP include directory" FORCE)
  endif ()
  if (NOT MPFR_INCLUDE_DIR)
    set(MPFR_INCLUDE_DIR "@MPFR_INCLUDE_DIR@"
      CACHE FILEPATH "The MPFR include directory" FORCE)
  endif ()
  if (NOT MPC_INCLUDE_DIR)
    set(MPC_INCLUDE_DIR "@MPC_INCLUDE_DIR@"
      CACHE FILEPATH "The MPC include directory" FORCE)
  endif ()
endif (_HYDROGEN_HAVE_MPC)

include("modules/FindAndVerifyExtendedPrecision")

# LAPACK
set(_HYDROGEN_HAVE_OPENBLAS @HYDROGEN_HAVE_OPENBLAS@)
if (_HYDROGEN_HAVE_OPENBLAS)
  set(BLAS_openblas_LIBRARY "@BLAS_openblas_LIBRARY@"
    CACHE PATH "Path to a library")
  set(LAPACK_openblas_LIBRARY "@LAPACK_openblas_LIBRARY@"
    CACHE PATH "Path to a library")
  set(BLA_VENDOR "OpenBLAS")
endif ()

include("modules/FindAndVerifyLAPACK")

@PACKAGE_INIT@

# Now actually import the Hydrogen target
set(_TMP_INCLUDE_DIRS "@PACKAGE_INCLUDE_INSTALL_DIRS@")
foreach (_DIR ${_TMP_INCLUDE_DIRS})
  set_and_check(_INCLUDE_DIR "${_DIR}")
  list(APPEND HYDROGEN_INCLUDE_DIRS "${_INCLUDE_DIR}")
endforeach (_DIR "${_TMP_INCLUDE_DIRS}")

set(_TMP_LIBRARY_DIRS "@PACKAGE_LIB_INSTALL_DIR@")
foreach (_DIR ${_TMP_LIBRARY_DIRS})
  set_and_check(_LIBRARY_DIR "${_DIR}")
  list(APPEND HYDROGEN_LIBRARY_DIRS "${_LIBRARY_DIR}")
endforeach (_DIR ${_TMP_LIBRARY_DIRS})

if (NOT TARGET H::Hydrogen)
  include(${CMAKE_CURRENT_LIST_DIR}/HydrogenTargets.cmake)
endif (NOT TARGET H::Hydrogen)

check_required_components(Hydrogen)

set(HYDROGEN_LIBRARIES H::Hydrogen)
